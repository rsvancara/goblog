apiVersion: apps/v1
kind: Deployment
metadata:
  name: tryingadventure
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: tryingadventure
      app.kubernetes.io/name: tryingadventure
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "5000"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/instance: tryingadventure
        app.kubernetes.io/name: tryingadventure
        app: tryingadventure
    spec:
      containers:
      - env:
        - name: S3_BUCKET
          valueFrom:
            secretKeyRef:
              key: S3_BUCKET
              name: tryingadventure
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: tryingadventure
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: tryingadventure
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              key: AWS_REGION
              name: tryingadventure
        - name: CACHE_URI
          valueFrom:
            secretKeyRef:
              key: CACHE_URI
              name: tryingadventure
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: REDIS_PASSWORD
              name: tryingadventure
        - name: DB_URI
          valueFrom:
            secretKeyRef:
              key: DB_URI
              name: tryingadventure
        - name: ENV
          valueFrom:
            secretKeyRef:
              key: ENV
              name: tryingadventure
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: ADMIN_USER
              name: tryingadventure
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ADMIN_PASSWORD
              name: tryingadventure
        - name: SITE
          valueFrom:
            secretKeyRef:
              key: SITE
              name: tryingadventure
        - name: SESSION_TIMEOUT
          valueFrom:
            secretKeyRef:
              key: SESSION_TIMEOUT
              name: tryingadventure
        - name: MONGO_DATABASE
          valueFrom:
            secretKeyRef:
              key: MONGO_DATABASE
              name: tryingadventure
        - name: REDIS_DB
          valueFrom:
            secretKeyRef:
              key: REDIS_DB
              name: tryingadventure
        - name: GEOSERVICE
          valueFrom:
            secretKeyRef:
              key: GEOSERVICE
              name: tryingadventure
        - name: IMAGESERVICE
          valueFrom:
            secretKeyRef:
              key: IMAGESERVICE
              name: tryingadventure
        image: artifact.tryingadventure.com/goblog:0.1.58
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck957873
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: tryingadventure
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck957873
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: 
          requests:
            memory: "256Mi"
            cpu: "1000m"
          limits:
            memory: "256Mi"
            cpu: "1000m"
        securityContext: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: regcred
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
