apiVersion: apps/v1
kind: Deployment
metadata:
  name: tryingadventure-redis
  namespace: tryingadventure
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: tryingadventure-redis
      app.kubernetes.io/name: tryingadventure-redis
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        name: tryingadventure-redis
      labels:
        app.kubernetes.io/instance: tryingadventure-redis
        app.kubernetes.io/name: tryingadventure-redis
        app: tryingadventure-redis
    spec:
      containers:
        - name: tryingadventure-redis
          env:
          - name: MASTER
            value: "true"
          volumeMounts:
          - mountPath: /redis-master-data
            name: data
          - mountPath: /redis-master
            name: config
          image: redis:6.2
          command:
            - redis-server
            - "/redis-master/redis.conf"
          imagePullPolicy: Always
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: redis # named port
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 3
            failureThreshold: 3
          resources: 
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      volumes:
      - name: data
        emptyDir: {}
      - name: config
        configMap:
          name: redis-config
          items:
          - key: redis-config
            path: redis.conf
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: regcred
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
